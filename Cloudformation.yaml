Resources:
  MyELKInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.medium
      Tags:
      - Key: Name
        Value: elkStack
      ImageId: ami-0e001c9271cf7f3b9 # Replace with the actual AMI ID for Ubuntu
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash -xe

            #Installing Elasticsearch
            apt-get update -y
            wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add -
            echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | tee /etc/apt/sources.list.d/elastic-7.x.list
            apt-get update && apt-get install elasticsearch
            
            #Setting env Variables and adjusting elasticsearch config
            IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
            echo "IP is: $IP"
            echo "network.host: $IP" >> /etc/elasticsearch/elasticsearch.yml
            echo "node.name: node-1" >> /etc/elasticsearch/elasticsearch.yml
            echo "discovery.type: single-node" >> /etc/elasticsearch/elasticsearch.yml
            echo "cluster.name: Metrics-project" >> /etc/elasticsearch/elasticsearch.yml
            systemctl start elasticsearch.service
            
            #Downloading and starting python http server
            curl -o /home/ubuntu/server.py https://raw.githubusercontent.com/Sebziel/metrics-project/master/server.py
            python3 /home/ubuntu/server.py > /dev/null 2>&1 &
            
            # Function to check if Kibana is up - It's required for metricbeat to function correctly to start Kibana first.
            wait_for_kibana() {
              local kibana_url="http://$IP:5601"
              local max_attempts=30
              local attempt=1
            
              echo "Waiting for Kibana to be available at $kibana_url..."
            
              while [ $attempt -le $max_attempts ]; do
                # Follow redirects with -L and check for a successful response
                if curl -s -L -o /dev/null -w "%{http_code}" $kibana_url | grep "200\|302" > /dev/null; then
                  echo "Kibana is up and running!"
                  return 0
                else
                  echo "Attempt $attempt/$max_attempts: Kibana is not available yet. Retrying in 5 seconds..."
                  attempt=$((attempt + 1))
                  sleep 5
                fi
              done
            
              echo "Kibana did not become available after $max_attempts attempts."
              return 1
            }
            
            #Installing and adjusting kibana config
            apt-get install kibana
            echo "server.host: $IP" >> /etc/kibana/kibana.yml
            echo "elasticsearch.hosts: http://$IP:9200" >> /etc/kibana/kibana.yml
            systemctl start kibana
            #Adding sleep to allow to load kibana before setting up dashboards
            
            if ! wait_for_kibana; then
              echo "Failed to start Kibana. Exiting."
              exit 1
            fi
            
            #Installing and adjusting metricbeat config, installing python utilities
            apt-get install metricbeat -y
            sed -i "s/#host: \"localhost:5601\"/host: \"http:\/\/$IP:5601\"/g" /etc/metricbeat/metricbeat.yml
            sed -i "s/hosts: \[\"localhost:9200\"\]/hosts: \[\"$IP:9200\"\]/g" /etc/metricbeat/metricbeat.yml
            metricbeat modules enable prometheus
            sed -i "s/hosts: \[\"localhost:9090\"\]/hosts: \[\"localhost:80\"\]/g" /etc/metricbeat/modules.d/prometheus.yml
            echo "- module: prometheus" >> /etc/metricbeat/modules.d/prometheus.yml
            echo "  period: 10s" >> /etc/metricbeat/modules.d/prometheus.yml
            echo "  hosts: ["localhost:80"]" >> /etc/metricbeat/modules.d/prometheus.yml
            echo "  metrics_path: /metrics/gc" >> /etc/metricbeat/modules.d/prometheus.yml
            systemctl start metricbeat
            echo "Loading Dashboard from metricbeat to kibana"
            metricbeat setup --dashboards

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0          
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9300
          ToPort: 9300
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5601
          ToPort: 5601
          CidrIp: 0.0.0.0/0